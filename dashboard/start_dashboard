#!/bin/bash

if [ -z "$DASHBOARD_HOME" ]; then
    DASHBOARD_HOME=./
fi

# Command line parser
while getopts ":c:t:" opt; do
    case $opt in
        c)
            config_dir=$OPTARG
            ;;
        t)
            test_mode='-t'
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

csv_files=$(find $config_dir -maxdepth 1 -type f -name "*.csv")

name_list=()
pid_list=() # New list to store process IDs

# Function to stop processes
stop_processes_and_exit() {
    echo "Stopping dashboard generation processes..."
    for pid in "${pid_list[@]}"; do
        kill $pid
    done

    echo "All processes have been stopped. Exiting..."
    exit 0
}

# Set trap for exit call
trap stop_processes_and_exit EXIT

# Process each .csv file here
for file in $csv_files; do
    filename=$(basename "$file")
    name="${filename%.*}"
    name_list+=("$name")
done

# Start the dashboard generation for each .csv file
for name in "${name_list[@]}"; do
    echo "Creating folder for $name"
    if [ ! -d $name ]; then mkdir $name; fi
    # Copy logos to the folder
    cp $DASHBOARD_HOME/$name-logo.jpeg $name/logo.jpeg
    python $DASHBOARD_HOME/generate.py -f $config_dir/$name.csv -r 5 -o $name $test_mode &
    sleep 1
    if [ $? -ne 0 ]; then
        echo "Dashboard generator failed to start for $name"
        stop_processes_and_exit
    fi
    pid_list+=("$!") # Store the process ID in the list
    echo "Dashboard generation started for $name PID $!"
done

# Wait until all app processes finish running
echo "Waiting for app processes to finish..."
for pid in "${pid_list[@]}"; do
    wait $pid
done

echo "All app processes have finished. Exiting..."

exit 0
